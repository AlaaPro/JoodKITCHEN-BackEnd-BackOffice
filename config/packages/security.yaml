security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
            
        # Public API endpoints (no authentication required)
        api_public:
            pattern: ^/api/(docs|auth)
            stateless: true
            security: false
            
        # API endpoints with JWT authentication
        api:
            pattern: ^/api
            stateless: true
            jwt: ~
            
        main:
            lazy: true
            provider: app_user_provider
            context: shared_context
            custom_authenticators:
                - App\Security\JwtAuthenticator

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Public endpoints - no authentication required
        - { path: ^/api/docs, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth, roles: PUBLIC_ACCESS }
        - { path: ^/api/plats$, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/menus$, roles: PUBLIC_ACCESS, methods: [GET] }
        
        # Admin routes - allow public access (authentication handled by frontend JavaScript)
        - { path: ^/admin, roles: PUBLIC_ACCESS }
        
        # API endpoints - role-based access
        - { path: ^/api/admin, roles: ROLE_ADMIN }
        - { path: ^/api/users, roles: ROLE_ADMIN, methods: [GET, POST, PUT, PATCH, DELETE] }
        - { path: ^/api/admin_profiles, roles: ROLE_SUPER_ADMIN }
        - { path: ^/api/kitchen_profiles, roles: [ROLE_ADMIN, ROLE_KITCHEN] }
        - { path: ^/api/client_profiles, roles: [ROLE_ADMIN, ROLE_CLIENT] }
        - { path: ^/api/commandes, roles: [ROLE_ADMIN, ROLE_CLIENT, ROLE_KITCHEN] }
        - { path: ^/api/plats, roles: [ROLE_ADMIN, ROLE_KITCHEN], methods: [POST, PUT, PATCH, DELETE] }
        - { path: ^/api/menus, roles: [ROLE_ADMIN, ROLE_KITCHEN], methods: [POST, PUT, PATCH, DELETE] }
        - { path: ^/api/abonnements, roles: [ROLE_ADMIN, ROLE_CLIENT] }
        - { path: ^/api/notifications, roles: [ROLE_ADMIN, ROLE_CLIENT, ROLE_KITCHEN] }
        - { path: ^/api/payments, roles: [ROLE_ADMIN, ROLE_CLIENT] }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

    role_hierarchy:
        ROLE_CLIENT: ROLE_USER
        ROLE_KITCHEN: ROLE_USER
        ROLE_ADMIN: [ROLE_USER, ROLE_CLIENT, ROLE_KITCHEN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
