{% extends 'admin/base.html.twig' %}

{% block title %}Administrateurs - JoodKitchen Admin{% endblock %}

{% block breadcrumb %}
<li class="breadcrumb-item"><a href="{{ path('admin_dashboard') }}">Accueil</a></li>
<li class="breadcrumb-item"><a href="{{ path('admin_clients') }}">Clients</a></li>
<li class="breadcrumb-item active">Administrateurs</li>
{% endblock %}

{% block content %}
<!-- Admins Header -->
<div class="row mb-4">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="h2 mb-0 jood-dark">Gestion des Administrateurs</h1>
                <p class="text-muted">
                    Gérez les comptes administrateurs et leurs permissions
                    <span class="badge bg-secondary ms-2" id="permissionLevelBadge">Chargement...</span>
                </p>
            </div>
            <div>
                {% if is_granted('manage_admins') %}
                <button class="btn btn-primary me-2" id="createAdminBtn">
                    <i class="fas fa-user-shield"></i> Nouvel Administrateur
                </button>
                {% endif %}
                {% if is_granted('manage_permissions') %}
                <button class="btn btn-outline-primary" id="managePermissionsBtn">
                    <i class="fas fa-key"></i> Permissions
                </button>
                {% endif %}
                {% if is_granted('view_admins') %}
                <button class="btn btn-outline-success" id="exportAdminsBtn">
                    <i class="fas fa-download"></i> Exporter
                </button>
                {% endif %}
                {% if is_granted('view_permissions') %}
                {# <button type="button" class="btn btn-outline-info" onclick="togglePermissionTestPanel()" data-coreui-toggle="tooltip" title="Test the permission system v2.0">
                    <i class="fas fa-vial"></i> Test Permissions
                    <span class="badge bg-info ms-1">v2.0</span>
                </button> #}
                {% endif %}
            </div>
        </div>
    </div>
</div>

<!-- Security Alert - Enhanced for Permission System v2.0 -->
{% if is_granted('manage_admins') or is_granted('edit_super_admin') %}
<div class="alert alert-info mb-4">
    <div class="d-flex align-items-center">
        <i class="fas fa-shield-alt me-3 fs-4"></i>
        <div>
            <strong>Zone de gestion avancée (Permission System v2.0)</strong><br>
            <small>
                {% if is_granted('edit_super_admin') %}
                    Vous pouvez gérer tous les administrateurs, y compris les Super Admins.
                {% elseif is_granted('manage_admins') %}
                    Vous pouvez gérer les administrateurs réguliers.
                {% endif %}
                Toutes les actions sont journalisées et soumises aux permissions granulaires.
            </small>
        </div>
    </div>
</div>
{% endif %}

<!-- Admin Stats -->
<div class="row g-4 mb-4">
    <div class="col-lg-3 col-sm-6">
        <div class="card jood-widget-card jood-secondary-bg">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <div class="widget-value" id="superAdminCount">-</div>
                        <div class="widget-label">Super Admin</div>
                    </div>
                    <div class="flex-shrink-0">
                        <i class="fas fa-crown fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-lg-3 col-sm-6">
        <div class="card jood-widget-card jood-primary-bg">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <div class="widget-value" id="totalAdmins">-</div>
                        <div class="widget-label">Administrateurs</div>
                    </div>
                    <div class="flex-shrink-0">
                        <i class="fas fa-user-shield fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-lg-3 col-sm-6">
        <div class="card jood-widget-card jood-success-bg">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <div class="widget-value" id="activeAdmins">-</div>
                        <div class="widget-label">Actifs</div>
                    </div>
                    <div class="flex-shrink-0">
                        <i class="fas fa-user-check fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-lg-3 col-sm-6">
        <div class="card jood-widget-card jood-warning-bg">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <div class="widget-value" id="suspendedAdmins">-</div>
                        <div class="widget-label">Suspendu</div>
                    </div>
                    <div class="flex-shrink-0">
                        <i class="fas fa-user-times fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading State -->
<div id="loadingState" class="text-center py-5" style="display: none;">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Chargement...</span>
    </div>
    <p class="mt-3 text-muted">Chargement des administrateurs...</p>
</div>

<!-- Administrators List -->
<div class="card" id="adminTableCard">
    <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
            <h4 class="card-title mb-0">
                <i class="fas fa-users-cog"></i> Liste des Administrateurs
            </h4>
            <div class="d-flex align-items-center gap-2">
                <select class="form-select form-select-sm" id="roleFilter" style="width: auto;">
                    <option value="">Tous les niveaux</option>
                    <option value="ROLE_SUPER_ADMIN">Super Admin</option>
                    <option value="ROLE_ADMIN">Administrateur</option>
                </select>
                <select class="form-select form-select-sm" id="statusFilter" style="width: auto;">
                    <option value="">Tous les statuts</option>
                    <option value="active">Actif</option>
                    <option value="inactive">Inactif</option>
                </select>
                <input type="text" class="form-control form-control-sm" id="adminSearchInput" placeholder="Rechercher..." style="width: 200px;">
                <button class="btn btn-outline-secondary btn-sm" id="resetFiltersBtn">
                    <i class="fas fa-undo"></i>
                </button>
            </div>
        </div>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover mb-0" id="adminsTable">
                <thead class="table-light">
                    <tr>
                        <th>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="selectAllAdmins">
                            </div>
                        </th>
                        <th>Administrateur</th>
                        <th>Niveau</th>
                        <th>Statut</th>
                        <th>Dernière connexion</th>
                        <th>Permissions</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="adminTableBody">
                    <!-- Dynamic content will be loaded here -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Enhanced CRUD Modals for AdminProfile -->
{{ include('components/modals/admin-profile-modals.html.twig') }}

<script>
// Initialize AdminProfile Manager when page loads
document.addEventListener('DOMContentLoaded', function() {
    // Initialize the AdminProfile CRUD manager
    window.adminProfileManager = new AdminProfileManager();
    
    console.log('🚀 AdminProfile CRUD Manager initialized with new permission system integration');
    
    // Connect header buttons based on permissions
    {% if is_granted('manage_admins') %}
    // Create button is already handled by AdminProfileManager
    console.log('✅ Create admin permissions granted');
    {% endif %}
    
    {% if is_granted('manage_permissions') %}
    document.getElementById('managePermissionsBtn').addEventListener('click', () => {
        // Redirect to permission management interface
        window.location.href = '{{ path('admin_dashboard') }}#permissions';
    });
    {% else %}
    // Hide permissions button if no access
    const permBtn = document.getElementById('managePermissionsBtn');
    if (permBtn) permBtn.style.display = 'none';
    {% endif %}
    
    {% if is_granted('view_admins') %}
    document.getElementById('exportAdminsBtn').addEventListener('click', () => {
        adminProfileManager.exportAdmins();
    });
    {% else %}
    // Hide export button if no access
    const exportBtn = document.getElementById('exportAdminsBtn');
    if (exportBtn) exportBtn.style.display = 'none';
    {% endif %}
    
    // Connect search and filters
    document.getElementById('adminSearchInput').addEventListener('input', (e) => {
        adminProfileManager.filterAdmins({
            search: e.target.value,
            role: document.getElementById('roleFilter').value,
            status: document.getElementById('statusFilter').value
        });
    });
    
    document.getElementById('roleFilter').addEventListener('change', (e) => {
        adminProfileManager.filterAdmins({
            search: document.getElementById('adminSearchInput').value,
            role: e.target.value,
            status: document.getElementById('statusFilter').value
        });
    });
    
    document.getElementById('statusFilter').addEventListener('change', (e) => {
        adminProfileManager.filterAdmins({
            search: document.getElementById('adminSearchInput').value,
            role: document.getElementById('roleFilter').value,
            status: e.target.value
        });
    });
    
    document.getElementById('resetFiltersBtn').addEventListener('click', () => {
        document.getElementById('adminSearchInput').value = '';
        document.getElementById('roleFilter').value = '';
        document.getElementById('statusFilter').value = '';
        adminProfileManager.loadAdminProfiles();
    });
    
    // Connect select all checkbox
    document.getElementById('selectAllAdmins').addEventListener('change', (e) => {
        const checkboxes = document.querySelectorAll('.admin-select-checkbox');
        checkboxes.forEach(cb => cb.checked = e.target.checked);
    });
    
    // AdminProfileManager automatically loads data in constructor
    // No need to call loadAdminProfiles() again
});

// Enhanced Permission System v2.0 - Global helper functions
window.AdminPermissions = {
    // Current user's permissions (populated from backend)
    userPermissions: {% if app.user and app.user.adminProfile and app.user.adminProfile.allPermissionNames %}{{ app.user.adminProfile.allPermissionNames|json_encode|raw }}{% else %}[]{% endif %},
    
    // Permission System v2.0 - No automatic SUPER_ADMIN privileges
    hasPermission: function(permission) {
        return this.userPermissions.includes(permission);
    },
    
    // Enhanced contextual permission checking
    canEdit: function(targetUserRoles) {
        // v2.0: Permission-based logic only
        if (targetUserRoles.includes('ROLE_SUPER_ADMIN')) {
            return this.hasPermission('edit_super_admin');
        }
        if (targetUserRoles.includes('ROLE_ADMIN')) {
            return this.hasPermission('edit_admin') || this.hasPermission('manage_admins');
        }
        return this.hasPermission('manage_admins');
    },
    
    // Enhanced deletion permission logic
    canDelete: function(targetUserRoles) {
        if (!this.hasPermission('delete_admin')) return false;
        
        if (targetUserRoles.includes('ROLE_SUPER_ADMIN')) {
            return this.hasPermission('edit_super_admin'); // Additional requirement for super admin deletion
        }
        if (targetUserRoles.includes('ROLE_ADMIN')) {
            return this.hasPermission('edit_admin') || this.hasPermission('manage_admins');
        }
        return this.hasPermission('manage_admins');
    },
    
    // New v2.0 features
    canManagePermissions: function() {
        return this.hasPermission('manage_permissions');
    },
    
    getPermissionLevel: function() {
        if (this.hasPermission('edit_super_admin')) return 'Super Admin Manager';
        if (this.hasPermission('manage_admins')) return 'Admin Manager';
        if (this.hasPermission('edit_admin')) return 'Admin Editor';
        return 'Limited Access';
    }
};

console.log('🔐 Permission system v2.0 initialized:', window.AdminPermissions);

// Display current user's permission level
const permissionLevel = window.AdminPermissions.getPermissionLevel();
const permissionBadge = document.getElementById('permissionLevelBadge');
if (permissionBadge) {
    permissionBadge.textContent = permissionLevel;
    permissionBadge.className = 'badge ms-2 ' + (
        permissionLevel.includes('Super Admin') ? 'bg-danger' :
        permissionLevel.includes('Manager') ? 'bg-warning' :
        permissionLevel.includes('Editor') ? 'bg-info' : 'bg-secondary'
    );
}

// ✨ NEW: Advanced Permission System Testing Functions
async function testUserPermissions() {
    const targetUserId = document.getElementById('targetUserSelect').value;
    if (!targetUserId) {
        AdminUtils.showAlert('Please select a user to test permissions', 'warning');
        return;
    }

    try {
        const response = await AdminAPI.checkUserPermissions(targetUserId);
        if (response && response.success) {
            displayPermissionResults(response);
        } else {
            AdminUtils.showAlert('Failed to check permissions', 'error');
        }
    } catch (error) {
        console.error('Permission check error:', error);
        AdminUtils.showAlert('Error checking permissions: ' + error.message, 'error');
    }
}

function displayPermissionResults(data) {
    // Show results panel
    document.getElementById('permissionTestResults').style.display = 'block';

    // Display voter permissions
    const voterResults = document.getElementById('voterPermissionsResults');
    voterResults.innerHTML = `
        <div class="mb-2">
            <strong>Current User:</strong> ${data.current_user.email}
            <span class="badge bg-${data.current_user.is_super_admin ? 'danger' : 'primary'} ms-2">
                ${data.current_user.is_super_admin ? 'SUPER_ADMIN' : 'ADMIN'}
            </span>
        </div>
        <div class="mb-3">
            <strong>Target User:</strong> ${data.target_user.email}
            <span class="badge bg-${data.target_user.is_super_admin ? 'danger' : 'primary'} ms-2">
                ${data.target_user.is_super_admin ? 'SUPER_ADMIN' : 'ADMIN'}
            </span>
        </div>
        <div class="row">
            ${Object.entries(data.voter_permissions).map(([key, value]) => `
                <div class="col-6 mb-2">
                    <i class="fas fa-${value ? 'check text-success' : 'times text-danger'} me-2"></i>
                    <small>${key.replace('can_', '').replace('_', ' ')}</small>
                </div>
            `).join('')}
        </div>
    `;

    // Display specific permissions
    const specificResults = document.getElementById('specificPermissionsResults');
    specificResults.innerHTML = `
        <div class="mb-2">
            <strong>Advanced Permissions:</strong>
        </div>
        <div class="row">
            ${Object.entries(data.specific_permissions).map(([key, value]) => `
                <div class="col-12 mb-2">
                    <i class="fas fa-${value ? 'check text-success' : 'times text-danger'} me-2"></i>
                    <code class="small">${key}</code>
                </div>
            `).join('')}
        </div>
        <div class="mt-3 p-2 bg-light rounded">
            <small class="text-muted">
                <strong>System Info:</strong><br>
                Version: ${data.system_info.permission_system_version}<br>
                Uses Advanced Permissions: ${data.system_info.uses_advanced_permissions ? 'Yes' : 'No'}<br>
                Fallback to Roles: ${data.system_info.fallback_to_roles ? 'Yes' : 'No'}
            </small>
        </div>
    `;

    // Store explanation data for potential display
    window.currentPermissionExplanation = data.permission_explanation;
}

function togglePermissionExplanation() {
    const explanationPanel = document.getElementById('permissionExplanation');
    if (explanationPanel.style.display === 'none') {
        if (window.currentPermissionExplanation) {
            displayPermissionExplanation(window.currentPermissionExplanation);
        }
        explanationPanel.style.display = 'block';
    } else {
        explanationPanel.style.display = 'none';
    }
}

function displayPermissionExplanation(explanation) {
    const editLogic = document.getElementById('editLogicExplanation');
    const deleteLogic = document.getElementById('deleteLogicExplanation');

    editLogic.innerHTML = `
        <div class="mb-2">
            <strong>Allowed:</strong> 
            <span class="badge bg-${explanation.edit_logic.allowed ? 'success' : 'danger'}">
                ${explanation.edit_logic.allowed ? 'Yes' : 'No'}
            </span>
        </div>
        <div>
            <strong>Reasons:</strong>
            <ul class="mb-0">
                ${explanation.edit_logic.reasons.map(reason => `<li class="small">${reason}</li>`).join('')}
            </ul>
        </div>
    `;

    deleteLogic.innerHTML = `
        <div class="mb-2">
            <strong>Allowed:</strong> 
            <span class="badge bg-${explanation.delete_logic.allowed ? 'success' : 'danger'}">
                ${explanation.delete_logic.allowed ? 'Yes' : 'No'}
            </span>
        </div>
        <div>
            <strong>Reasons:</strong>
            <ul class="mb-0">
                ${explanation.delete_logic.reasons.map(reason => `<li class="small">${reason}</li>`).join('')}
            </ul>
        </div>
    `;
}

async function showCurrentUserPermissions() {
    try {
        const response = await AdminAPI.getCurrentUserPermissions();
        if (response && response.success) {
            displayCurrentUserPermissions(response);
        }
    } catch (error) {
        console.error('Error fetching current user permissions:', error);
        AdminUtils.showAlert('Error fetching permissions: ' + error.message, 'error');
    }
}

function displayCurrentUserPermissions(data) {
    const content = `
        <div class="modal fade" id="currentUserPermissionsModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                        <h5 class="modal-title">My Permissions (Advanced System v2.0)</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6><i class="fas fa-user me-2"></i>User Info</h6>
                                <div class="card">
                                    <div class="card-body">
                                        <div><strong>Roles:</strong> ${data.roles.join(', ')}</div>
                                        <div><strong>Internal Roles:</strong> ${data.internal_roles.join(', ') || 'None'}</div>
                                        <div><strong>Permission Count:</strong> ${data.permission_count}</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h6><i class="fas fa-info-circle me-2"></i>System Info</h6>
                                <div class="card">
                                    <div class="card-body">
                                        <div><strong>New Permission System:</strong> ${data.system_info.new_permission_system ? 'Yes' : 'No'}</div>
                                        <div><strong>Cached Permissions:</strong> ${data.system_info.cached_permissions ? 'Yes' : 'No'}</div>
                                        <div><strong>Voter Based:</strong> ${data.system_info.voter_based ? 'Yes' : 'No'}</div>
                                </div>
                                </div>
                                </div>
                        </div>
                        <div class="mt-3">
                            <h6><i class="fas fa-key me-2"></i>All Permissions (${data.permission_count})</h6>
                            <div class="row">
                                ${data.permissions.map(permission => `
                                    <div class="col-md-4 mb-1">
                                        <code class="small">${permission}</code>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                        ${data.normalized_permissions && data.normalized_permissions.length > 0 ? `
                            <div class="mt-3">
                                <h6><i class="fas fa-database me-2"></i>Normalized Permissions (Database)</h6>
                                <div class="row">
                                    ${data.normalized_permissions.map(permission => `
                                        <div class="col-md-4 mb-1">
                                            <code class="small text-success">${permission}</code>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        ` : ''}
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
    // Remove existing modal and add new one
    const existingModal = document.getElementById('currentUserPermissionsModal');
    if (existingModal) existingModal.remove();
    
    document.body.insertAdjacentHTML('beforeend', content);
        
        // Show modal
    const modal = new coreui.Modal(document.getElementById('currentUserPermissionsModal'));
        modal.show();
}

function populateTargetUserSelect() {
    const select = document.getElementById('targetUserSelect');
    if (!select) return;

    // Get admin data from the current table
    const adminRows = document.querySelectorAll('#adminsTableBody tr[data-admin-id]');
    select.innerHTML = '<option value="">Choose a user to test permissions...</option>';
    
    adminRows.forEach(row => {
        const adminId = row.getAttribute('data-admin-id');
        const adminInfo = row.querySelector('td:nth-child(2)');
        if (adminInfo && adminId) {
            const nameElement = adminInfo.querySelector('.fw-semibold');
            const emailElement = adminInfo.querySelector('.text-muted');
            if (nameElement && emailElement) {
                const name = nameElement.textContent.trim();
                const email = emailElement.textContent.trim();
                select.innerHTML += `<option value="${adminId}">${name} (${email})</option>`;
            }
        }
    });
}

// Show/hide permission test panel
function togglePermissionTestPanel() {
    const panel = document.getElementById('permissionTestPanel');
    if (panel) {
        if (panel.style.display === 'none') {
            panel.style.display = 'block';
            populateTargetUserSelect();
            
            // Update current user level in the system info
            const currentUserLevel = document.getElementById('currentUserLevel');
            if (currentUserLevel && window.AdminPermissions) {
                currentUserLevel.textContent = window.AdminPermissions.getPermissionLevel();
            }
        } else {
            panel.style.display = 'none';
        }
    }
}
</script>

<!-- Recent Activity -->
<div class="row g-4 mt-2">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header jood-info-bg">
                <h5 class="card-title mb-0 text-white">
                    <i class="fas fa-history"></i> Activité Récente
                </h5>
            </div>
            <div class="card-body">
                <div class="activity-timeline" id="activityTimeline">
                    <!-- Dynamic content will be loaded here -->
                    <div class="text-center text-muted py-3">
                        <i class="fas fa-clock"></i> Chargement de l'activité...
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header jood-secondary-bg">
                <h5 class="card-title mb-0 text-white">
                    <i class="fas fa-shield-alt"></i> Sécurité
                </h5>
            </div>
            <div class="card-body">
                <div class="security-metrics" id="securityMetrics">
                    <!-- Dynamic content will be loaded here -->
                    <div class="text-center text-muted py-3">
                        <i class="fas fa-shield-alt"></i> Chargement des métriques de sécurité...
                    </div>
                </div>
                
                <hr>
                
                <div class="d-grid gap-2">
                    {% if is_granted('manage_system') %}
                    <button class="btn btn-outline-primary btn-sm" onclick="AdminPermissions.showSecurityAudit()">
                        <i class="fas fa-shield-alt"></i> Audit sécurité
                    </button>
                    {% endif %}
                    {% if is_granted('manage_admins') %}
                    <button class="btn btn-outline-warning btn-sm" onclick="AdminPermissions.forcePasswordReset()">
                        <i class="fas fa-key"></i> Forcer nouveau mot de passe
                    </button>
                    {% endif %}
                    {% if is_granted('view_activity_logs') %}
                    <button class="btn btn-outline-info btn-sm" onclick="AdminPermissions.showConnectionLog()">
                        <i class="fas fa-history"></i> Journal des connexions
                    </button>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Permission Matrix Modal (if user has permission) -->
{% if is_granted('view_permission_matrix') %}
<div class="modal fade" id="permissionMatrixModal" tabindex="-1" aria-labelledby="permissionMatrixModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="permissionMatrixModalLabel">
                    <i class="fas fa-table"></i> Matrice des Permissions
                </h5>
                <button type="button" class="btn-close" data-coreui-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="permissionMatrix">
                    <!-- Dynamic permission matrix will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>
{% endif %}

{% if is_granted('view_permissions') %}
<!-- Permission Testing Panel (Development/Testing) -->
<div class="card mt-4" id="permissionTestPanel" style="display: none;">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-vial me-2"></i>Test Permissions (Advanced System v2.0)
            <button type="button" class="btn btn-sm btn-outline-secondary ms-2" onclick="togglePermissionExplanation()">
                <i class="fas fa-info-circle"></i> Show Explanation
            </button>
        </h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <label class="form-label">Select Target User:</label>
                <select class="form-control" id="targetUserSelect">
                    <option value="">Choose a user to test permissions...</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">&nbsp;</label>
                <div>
                    <button type="button" class="btn btn-primary" onclick="testUserPermissions()">
                        <i class="fas fa-search"></i> Check Permissions
                    </button>
                    <button type="button" class="btn btn-info ms-2" onclick="showCurrentUserPermissions()">
                        <i class="fas fa-user"></i> My Permissions
                    </button>
                </div>
            </div>
            <div class="col-md-4">
                <label class="form-label">System Info:</label>
                <div class="small text-muted">
                    Permission System: v2.0 ✨<br>
                    Type: Advanced Granular Permissions<br>
                    Fallback: None (Pure Permission-Based)<br>
                    Your Level: <span id="currentUserLevel" class="fw-bold">Loading...</span>
                </div>
            </div>
        </div>
        
        <!-- Permission Test Results -->
        <div id="permissionTestResults" class="mt-4" style="display: none;">
            <div class="row">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fas fa-shield-alt me-2"></i>Voter Permissions</h6>
                        </div>
                        <div class="card-body" id="voterPermissionsResults">
                            <!-- Results populated by JavaScript -->
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fas fa-key me-2"></i>Specific Permissions</h6>
                        </div>
                        <div class="card-body" id="specificPermissionsResults">
                            <!-- Results populated by JavaScript -->
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Permission Logic Explanation -->
            <div class="card mt-3" id="permissionExplanation" style="display: none;">
                <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-brain me-2"></i>Permission Logic Explanation</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="text-success">Edit Permission Logic</h6>
                            <div id="editLogicExplanation" class="small">
                                <!-- Populated by JavaScript -->
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-danger">Delete Permission Logic</h6>
                            <div id="deleteLogicExplanation" class="small">
                                <!-- Populated by JavaScript -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endif %}

{% endblock %} 